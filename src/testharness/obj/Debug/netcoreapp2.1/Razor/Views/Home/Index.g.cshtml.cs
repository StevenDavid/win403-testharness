#pragma checksum "/Users/sdsteve/Documents/Code/wincon2019/testharness/src/testharness/Views/Home/Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8df2ca357ee293f00dbb5c10cb4273c9f1a7c46e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Index.cshtml", typeof(AspNetCore.Views_Home_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/Users/sdsteve/Documents/Code/wincon2019/testharness/src/testharness/Views/_ViewImports.cshtml"
using TestHarness;

#line default
#line hidden
#line 2 "/Users/sdsteve/Documents/Code/wincon2019/testharness/src/testharness/Views/_ViewImports.cshtml"
using TestHarness.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8df2ca357ee293f00dbb5c10cb4273c9f1a7c46e", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"18619a5d6f892cce657d1462057cca3f19d51bc5", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<TestHarness.Models.testRuns>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(37, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 3 "/Users/sdsteve/Documents/Code/wincon2019/testharness/src/testharness/Views/Home/Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
            BeginContext(84, 493, true);
            WriteLiteral(@"

<div class=""text-center"" >

<div class=""container"">
  <div class=""row"">
    <div class=""col-sm"">
            <canvas id=""myChart"" width=""500"" height=""500"" >hi I am in the canvas</canvas>
    </div>
    <div class=""col-sm"">
            <canvas id=""myChart3"" width=""500"" height=""500"" >hi I am in the canvas</canvas>
    </div>
  </div>
  
    <canvas id=""myChart2"" width=""1000"" height=""500""></canvas>
    <canvas id=""myChart4"" width=""1000"" height=""500""></canvas>
</div>



");
            EndContext();
#line 26 "/Users/sdsteve/Documents/Code/wincon2019/testharness/src/testharness/Views/Home/Index.cshtml"
   

    int tctMaxCalls = 0;
     string tctdatasets = "";
     int tctcurRun = 1;
     foreach(List<decimal> run in TestHarness.Models.testRuns.totalCallTime) {
         if (run.Count > tctMaxCalls) {
             tctMaxCalls = run.Count;
         }

        var singleRun = run.ToArray();
        tctdatasets += "{";
        tctdatasets += "label: 'Run "+tctcurRun+"',";
        //datasets += "backgroundColor: randomColorGen(),";
        tctdatasets += "borderColor: randomColorGen(),";
        tctdatasets += "fill: false,";

        string CurDataSet = "";
        for (int i = 0; i < singleRun.Length; i++) {
            CurDataSet += singleRun[i];
            if(i+1 < singleRun.Length) {
                CurDataSet += ",";
            }
        }
        tctdatasets += "data:["+CurDataSet+"]},";
        tctcurRun++;
    }
    if (tctdatasets.Length < 0) {
        tctdatasets.Substring(tctdatasets.Length-3);
    }

    string tctLineChartDatalabels = "[";
    for (int i = 0; i < tctMaxCalls; i++) {
        tctLineChartDatalabels += "'"+(i+1).ToString()+"'";
        if(i+1 < tctMaxCalls) {
            tctLineChartDatalabels += ",";
        }
    }
    tctLineChartDatalabels += "]";




     int MaxCalls = 0;
     string datasets = "";
     int curRun = 1;
     foreach(List<decimal> run in TestHarness.Models.testRuns.runs) {
         if (run.Count > MaxCalls) {
             MaxCalls = run.Count;
         }

        var singleRun = run.ToArray();
        datasets += "{";
        datasets += "label: 'Run "+curRun+"',";
        //datasets += "backgroundColor: randomColorGen(),";
        datasets += "borderColor: randomColorGen(),";
        datasets += "fill: false,";

        string CurDataSet = "";
        for (int i = 0; i < singleRun.Length; i++) {
            CurDataSet += singleRun[i];
            if(i+1 < singleRun.Length) {
                CurDataSet += ",";
            }
        }
        datasets += "data:["+CurDataSet+"]},";
        curRun++;
    }
    if (datasets.Length < 0) {
        datasets.Substring(datasets.Length-3);
    }

    string LineChartDatalabels = "[";
    for (int i = 0; i < MaxCalls; i++) {
        LineChartDatalabels += "'"+(i+1).ToString()+"'";
        if(i+1 < MaxCalls) {
            LineChartDatalabels += ",";
        }
    }
    LineChartDatalabels += "]";

    var runCount = TestHarness.Models.testRuns.runs.Count;
    string BarChartDatalabels = "[";
    for (int i = 0; i < runCount; i++) {
        BarChartDatalabels += "'Run "+(i+1).ToString()+"'";
        if(i+1 < runCount) {
            BarChartDatalabels += ",";
        }
    }
    BarChartDatalabels += "]";

    string Ave = "[";
    var tempAve = TestHarness.Models.testRuns.Averages.ToArray();
    for (int i = 0; i < tempAve.Length; i++) {
        Ave += tempAve[i].ToString();
        if(i+1 < tempAve.Length) {
            Ave += ",";
        }
    }
    Ave += "]";

    string Max = "[";
    var tempMax = TestHarness.Models.testRuns.Max.ToArray();
    for (int i = 0; i < tempMax.Length; i++) {
        Max += tempMax[i].ToString();
        if(i+1 < tempMax.Length) {
            Max += ",";
        }
    }
    Max += "]";

    string Min = "[";
    var tempMin = TestHarness.Models.testRuns.Min.ToArray();
    for (int i = 0; i < tempMin.Length; i++) {
        Min += tempMin[i].ToString();
        if(i+1 < tempMin.Length) {
            Min += ",";
        }
    }
    Min += "]";

    string Mode = "[";
    var tempMode = TestHarness.Models.testRuns.Mode.ToArray();
    for (int i = 0; i < tempMode.Length; i++) {
        Mode += tempMode[i].ToString();
        if(i+1 < tempMode.Length) {
            Mode += ",";
        }
    }
    Mode += "]";

    string Median = "[";
    var tempMedian = TestHarness.Models.testRuns.Median.ToArray();
    for (int i = 0; i < tempMedian.Length; i++) {
        Median += tempMedian[i].ToString();
        if(i+1 < tempMedian.Length) {
            Median += ",";
        }
    }
    Median += "]";

#line default
#line hidden
            BeginContext(4698, 337, true);
            WriteLiteral(@"



<script>

function randomColorGen() {
    var red = Math.floor((Math.random() * 200) + 70);
    var green = Math.floor((Math.random() * 200) + 70);
    var blue = Math.floor((Math.random() * 200) + 70);
 return 'rgba('+red+', '+green+', '+blue+', 0.9)';
}

var config = {
    type: 'bar',
    data: {
        labels: ");
            EndContext();
            BeginContext(5036, 29, false);
#line 183 "/Users/sdsteve/Documents/Code/wincon2019/testharness/src/testharness/Views/Home/Index.cshtml"
           Write(Html.Raw(@BarChartDatalabels));

#line default
#line hidden
            EndContext();
            BeginContext(5065, 84, true);
            WriteLiteral(",\r\n        datasets: [\r\n        {\r\n            label: \'Average\',\r\n            data: ");
            EndContext();
            BeginContext(5150, 14, false);
#line 187 "/Users/sdsteve/Documents/Code/wincon2019/testharness/src/testharness/Views/Home/Index.cshtml"
             Write(Html.Raw(@Ave));

#line default
#line hidden
            EndContext();
            BeginContext(5164, 212, true);
            WriteLiteral(",\r\n            backgroundColor: \'rgba(255, 99, 132, 0.2)\',\r\n            borderColor: \'rgba(255, 99, 132, 1)\',\r\n            borderWidth: 1\r\n        },\r\n        {\r\n            label: [\'Median\'],\r\n            data: ");
            EndContext();
            BeginContext(5377, 17, false);
#line 194 "/Users/sdsteve/Documents/Code/wincon2019/testharness/src/testharness/Views/Home/Index.cshtml"
             Write(Html.Raw(@Median));

#line default
#line hidden
            EndContext();
            BeginContext(5394, 210, true);
            WriteLiteral(",\r\n            backgroundColor: \'rgba(54, 162, 235, 0.2)\',\r\n            borderColor: \'rgba(54, 162, 235, 1)\',\r\n            borderWidth: 1\r\n        },\r\n        {\r\n            label: [\'Mode\'],\r\n            data: ");
            EndContext();
            BeginContext(5605, 15, false);
#line 201 "/Users/sdsteve/Documents/Code/wincon2019/testharness/src/testharness/Views/Home/Index.cshtml"
             Write(Html.Raw(@Mode));

#line default
#line hidden
            EndContext();
            BeginContext(5620, 209, true);
            WriteLiteral(",\r\n            backgroundColor: \'rgba(255, 206, 86, 0.2)\',\r\n            borderColor: \'rgba(255, 206, 86, 1)\',\r\n            borderWidth: 1\r\n        },\r\n        {\r\n            label: [\'Min\'],\r\n            data: ");
            EndContext();
            BeginContext(5830, 14, false);
#line 208 "/Users/sdsteve/Documents/Code/wincon2019/testharness/src/testharness/Views/Home/Index.cshtml"
             Write(Html.Raw(@Min));

#line default
#line hidden
            EndContext();
            BeginContext(5844, 847, true);
            WriteLiteral(@",
            backgroundColor: 'rgba(153, 102, 255, 0.2)',
            borderColor: 'rgba(153, 102, 255, 1)',
            borderWidth: 1
        }]
    },
    options: {
        title: {
            display: true,
            text: 'Test Aggregates'
        },
        scales: {
					xAxes: [{
						scaleLabel: {
							display: true,
							labelString: 'Runs'
						}
					}],
            yAxes: [{
                ticks: {
                    beginAtZero: true
                },
                scaleLabel: {
                    display: true,
                    labelString: 'Request Time (milliseconds)'
                }
            }]
        }
    }
};

var ctx = document.getElementById('myChart');
var myChart = new Chart(ctx, config);

    var config2 = {
			type: 'line',
			data: {
				labels: ");
            EndContext();
            BeginContext(6692, 30, false);
#line 245 "/Users/sdsteve/Documents/Code/wincon2019/testharness/src/testharness/Views/Home/Index.cshtml"
                   Write(Html.Raw(@LineChartDatalabels));

#line default
#line hidden
            EndContext();
            BeginContext(6722, 18, true);
            WriteLiteral(",\r\n\t\t\t\tdatasets: [");
            EndContext();
            BeginContext(6741, 19, false);
#line 246 "/Users/sdsteve/Documents/Code/wincon2019/testharness/src/testharness/Views/Home/Index.cshtml"
                      Write(Html.Raw(@datasets));

#line default
#line hidden
            EndContext();
            BeginContext(6760, 768, true);
            WriteLiteral(@"]
			},
			options: {
				responsive: true,
				title: {
					display: true,
					text: 'Test Call Details'
				},
				tooltips: {
					mode: 'index',
					intersect: false,
				},
				hover: {
					mode: 'nearest',
					intersect: true
				},
				scales: {
					xAxes: [{
						display: true,
						scaleLabel: {
							display: true,
							labelString: 'Calls'
						}
					}],
					yAxes: [{
						display: true,
						scaleLabel: {
							display: true,
							labelString: 'Request Time (milliseconds)'
						}
					}]
				}
			}
		};

        
    var ctx2 = document.getElementById('myChart2');
    var myChart2 = new Chart(ctx2, config2);

    var config3 = {
        type: 'bar',
        data: {
            labels: ");
            EndContext();
            BeginContext(7529, 29, false);
#line 288 "/Users/sdsteve/Documents/Code/wincon2019/testharness/src/testharness/Views/Home/Index.cshtml"
               Write(Html.Raw(@BarChartDatalabels));

#line default
#line hidden
            EndContext();
            BeginContext(7558, 84, true);
            WriteLiteral(",\r\n            datasets: [{\r\n                label: [\'Max\'],\r\n                data: ");
            EndContext();
            BeginContext(7643, 14, false);
#line 291 "/Users/sdsteve/Documents/Code/wincon2019/testharness/src/testharness/Views/Home/Index.cshtml"
                 Write(Html.Raw(@Max));

#line default
#line hidden
            EndContext();
            BeginContext(7657, 1086, true);
            WriteLiteral(@",
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            title: {
                display: true,
                text: 'Test Call Max Values'
            },
            scales: {
                        xAxes: [{
                            scaleLabel: {
                                display: true,
                                labelString: 'Runs'
                            }
                        }],
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Request Time (milliseconds)'
                    }
                }]
            }
        }
    };

    var ctx3 = document.getElementById('myChart3');
    var myChart3 = new Chart(ctx3, config3);

");
            WriteLiteral("\r\n var config4 = {\r\n\t\t\ttype: \'line\',\r\n\t\t\tdata: {\r\n\t\t\t\tlabels: ");
            EndContext();
            BeginContext(8744, 33, false);
#line 329 "/Users/sdsteve/Documents/Code/wincon2019/testharness/src/testharness/Views/Home/Index.cshtml"
                   Write(Html.Raw(@tctLineChartDatalabels));

#line default
#line hidden
            EndContext();
            BeginContext(8777, 18, true);
            WriteLiteral(",\r\n\t\t\t\tdatasets: [");
            EndContext();
            BeginContext(8796, 22, false);
#line 330 "/Users/sdsteve/Documents/Code/wincon2019/testharness/src/testharness/Views/Home/Index.cshtml"
                      Write(Html.Raw(@tctdatasets));

#line default
#line hidden
            EndContext();
            BeginContext(8818, 713, true);
            WriteLiteral(@"]
			},
			options: {
				responsive: true,
				title: {
					display: true,
					text: 'Test Call Details (TCT)'
				},
				tooltips: {
					mode: 'index',
					intersect: false,
				},
				hover: {
					mode: 'nearest',
					intersect: true
				},
				scales: {
					xAxes: [{
						display: true,
						scaleLabel: {
							display: true,
							labelString: 'Calls'
						}
					}],
					yAxes: [{
						display: true,
						scaleLabel: {
							display: true,
							labelString: 'Request Time (milliseconds)'
						}
					}]
				}
			}
		};

        
    var ctx4 = document.getElementById('myChart4');
    var myChart4 = new Chart(ctx4, config4);

</script>
</div>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TestHarness.Models.testRuns> Html { get; private set; }
    }
}
#pragma warning restore 1591
