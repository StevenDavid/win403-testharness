@model TestHarness.Models.testRuns;

@{
    ViewData["Title"] = "Home Page";
}


<div class="text-center" >

<div class="container">
  <div class="row">
  </div>
  <div class="row">
    <div class="col-sm">
            <canvas id="myChart" width="500" height="500" >hi I am in the canvas</canvas>
    </div>
    <div class="col-sm">
            <canvas id="myChart3" width="500" height="500" >hi I am in the canvas</canvas>
    </div>
  </div>
  
    <canvas id="myChart2" width="1000" height="500"></canvas>
    <canvas id="myChart4" width="1000" height="500"></canvas>
</div>



@{

    int tctMaxCalls = 0;
    string tctdatasets = "";
    int tctcurRun = 1;
    foreach(List<decimal> run in TestHarness.Models.testRuns.totalCallTime) {
        if (run.Count > tctMaxCalls) {
            tctMaxCalls = run.Count;
        }
        string tctLabel = TestHarness.Models.testRuns.runType[tctcurRun -1];
        var singleRun = run.ToArray();
        tctdatasets += "{";
        tctdatasets += "label: '"+ tctLabel + " "+ tctcurRun +"',";
        //datasets += "backgroundColor: randomColorGen(),";
        tctdatasets += "borderColor: randomColorGen(),";
        tctdatasets += "fill: false,";

        string CurDataSet = "";
        for (int i = 0; i < singleRun.Length; i++) {
            CurDataSet += singleRun[i];
            if(i+1 < singleRun.Length) {
                CurDataSet += ",";
            }
        }
        tctdatasets += "data:["+CurDataSet+"]},";
        tctcurRun++;
    }
    if (tctdatasets.Length < 0) {
        tctdatasets.Substring(tctdatasets.Length-3);
    }

    string tctLineChartDatalabels = "[";
    for (int i = 0; i < tctMaxCalls; i++) {
        tctLineChartDatalabels += "'"+(i+1).ToString()+"'";
        if(i+1 < tctMaxCalls) {
            tctLineChartDatalabels += ",";
        }
    }
    tctLineChartDatalabels += "]";




    int MaxCalls = 0;
    string datasets = "";
    int curRun = 1;
    foreach(List<decimal> run in TestHarness.Models.testRuns.runs) {
        if (run.Count > MaxCalls) {
            MaxCalls = run.Count;
        }

        string runLabel = TestHarness.Models.testRuns.runType[curRun -1];
        var singleRun = run.ToArray();
        datasets += "{";
        datasets += "label: '"+ runLabel + " "+ curRun +"',";
        //datasets += "backgroundColor: randomColorGen(),";
        datasets += "borderColor: randomColorGen(),";
        datasets += "fill: false,";

        string CurDataSet = "";
        for (int i = 0; i < singleRun.Length; i++) {
            CurDataSet += singleRun[i];
            if(i+1 < singleRun.Length) {
                CurDataSet += ",";
            }
        }
        datasets += "data:["+CurDataSet+"]},";
        curRun++;
    }
    if (datasets.Length < 0) {
        datasets.Substring(datasets.Length-3);
    }

    string LineChartDatalabels = "[";
    for (int i = 0; i < MaxCalls; i++) {
        LineChartDatalabels += "'"+(i+1).ToString()+"'";
        if(i+1 < MaxCalls) {
            LineChartDatalabels += ",";
        }
    }
    LineChartDatalabels += "]";

    var runCount = TestHarness.Models.testRuns.runs.Count;
    string BarChartDatalabels = "[";
    for (int i = 0; i < runCount; i++) {
        string barLabel = TestHarness.Models.testRuns.runType[i];
        BarChartDatalabels += "'"+ barLabel + " "+(i+1).ToString()+"'";
        if(i+1 < runCount) {
            BarChartDatalabels += ",";
        }
    }
    BarChartDatalabels += "]";

    string Ave = "[";
    var tempAve = TestHarness.Models.testRuns.Averages.ToArray();
    for (int i = 0; i < tempAve.Length; i++) {
        Ave += tempAve[i].ToString();
        if(i+1 < tempAve.Length) {
            Ave += ",";
        }
    }
    Ave += "]";

    string Max = "[";
    var tempMax = TestHarness.Models.testRuns.Max.ToArray();
    for (int i = 0; i < tempMax.Length; i++) {
        Max += tempMax[i].ToString();
        if(i+1 < tempMax.Length) {
            Max += ",";
        }
    }
    Max += "]";

    string Min = "[";
    var tempMin = TestHarness.Models.testRuns.Min.ToArray();
    for (int i = 0; i < tempMin.Length; i++) {
        Min += tempMin[i].ToString();
        if(i+1 < tempMin.Length) {
            Min += ",";
        }
    }
    Min += "]";

    string Mode = "[";
    var tempMode = TestHarness.Models.testRuns.Mode.ToArray();
    for (int i = 0; i < tempMode.Length; i++) {
        Mode += tempMode[i].ToString();
        if(i+1 < tempMode.Length) {
            Mode += ",";
        }
    }
    Mode += "]";

    string Median = "[";
    var tempMedian = TestHarness.Models.testRuns.Median.ToArray();
    for (int i = 0; i < tempMedian.Length; i++) {
        Median += tempMedian[i].ToString();
        if(i+1 < tempMedian.Length) {
            Median += ",";
        }
    }
    Median += "]";
}




<script>

function randomColorGen() {
    var red = Math.floor((Math.random() * 200) + 70);
    var green = Math.floor((Math.random() * 200) + 70);
    var blue = Math.floor((Math.random() * 200) + 70);
 return 'rgba('+red+', '+green+', '+blue+', 0.9)';
}

var config = {
    type: 'bar',
    data: {
        labels: @Html.Raw(@BarChartDatalabels),
        datasets: [
        {
            label: 'Average',
            data: @Html.Raw(@Ave),
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 1
        },
        {
            label: ['Median'],
            data: @Html.Raw(@Median),
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1
        },
        {
            label: ['Mode'],
            data: @Html.Raw(@Mode),
            backgroundColor: 'rgba(255, 206, 86, 0.2)',
            borderColor: 'rgba(255, 206, 86, 1)',
            borderWidth: 1
        },
        {
            label: ['Min'],
            data: @Html.Raw(@Min),
            backgroundColor: 'rgba(153, 102, 255, 0.2)',
            borderColor: 'rgba(153, 102, 255, 1)',
            borderWidth: 1
        }]
    },
    options: {
        title: {
            display: true,
            text: 'Test Aggregates'
        },
        scales: {
					xAxes: [{
						scaleLabel: {
							display: true,
							labelString: 'Runs'
						}
					}],
            yAxes: [{
                ticks: {
                    beginAtZero: true
                },
                scaleLabel: {
                    display: true,
                    labelString: 'Request Time (milliseconds)'
                }
            }]
        }
    }
};

var ctx = document.getElementById('myChart');
var myChart = new Chart(ctx, config);

    var config2 = {
			type: 'line',
			data: {
				labels: @Html.Raw(@LineChartDatalabels),
				datasets: [@Html.Raw(@datasets)]
			},
			options: {
				responsive: true,
				title: {
					display: true,
					text: 'Test Call Details'
				},
				tooltips: {
					mode: 'index',
					intersect: false,
				},
				hover: {
					mode: 'nearest',
					intersect: true
				},
				scales: {
					xAxes: [{
						display: true,
						scaleLabel: {
							display: true,
							labelString: 'Calls'
						}
					}],
					yAxes: [{
						display: true,
						scaleLabel: {
							display: true,
							labelString: 'Request Time (milliseconds)'
						}
					}]
				}
			}
		};

        
    var ctx2 = document.getElementById('myChart2');
    var myChart2 = new Chart(ctx2, config2);

    var config3 = {
        type: 'bar',
        data: {
            labels: @Html.Raw(@BarChartDatalabels),
            datasets: [{
                label: ['Max'],
                data: @Html.Raw(@Max),
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            title: {
                display: true,
                text: 'Test Call Max Values'
            },
            scales: {
                        xAxes: [{
                            scaleLabel: {
                                display: true,
                                labelString: 'Runs'
                            }
                        }],
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Request Time (milliseconds)'
                    }
                }]
            }
        }
    };

    var ctx3 = document.getElementById('myChart3');
    var myChart3 = new Chart(ctx3, config3);


 var config4 = {
			type: 'line',
			data: {
				labels: @Html.Raw(@tctLineChartDatalabels),
				datasets: [@Html.Raw(@tctdatasets)]
			},
			options: {
				responsive: true,
				title: {
					display: true,
					text: 'Test Call Details (TCT)'
				},
				tooltips: {
					mode: 'index',
					intersect: false,
				},
				hover: {
					mode: 'nearest',
					intersect: true
				},
				scales: {
					xAxes: [{
						display: true,
						scaleLabel: {
							display: true,
							labelString: 'Calls'
						}
					}],
					yAxes: [{
						display: true,
						scaleLabel: {
							display: true,
							labelString: 'Request Time (milliseconds)'
						}
					}]
				}
			}
		};

        
    var ctx4 = document.getElementById('myChart4');
    var myChart4 = new Chart(ctx4, config4);

</script>
</div>
